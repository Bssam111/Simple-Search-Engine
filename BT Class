public class BT<T> {  
public BTNode<T> root;  
public BTNode<T> current;  
  
  
public BT() {  
    root=current=null;  
}  
  
public boolean empty() {  
    return root==null;  
}  
  
public T retrieve() {  
    return current.data;  
      
}  
  
public void update(T val) {  
    current.data=val;  
}  
  
//insert  
public boolean insert(Relative rel, T val) {  
  
    switch(rel) {  
       case Root:  
        if(!empty())  
            return false;  
        current=root=new BTNode<T>(val);  
        return true;  
          
       case Parent: 
            return false;     
       case LeftChild:  
            if(current.left!=null)  
                return false;  
              
            current.left=new BTNode<T>(val);  
            current=current.left;  
            return true;  
              
       case RightChild:  
           if(current.right!=null)  
                return false;  
              
            current.right=new BTNode<T>(val);  
            current=current.right;  
            return true;  
       default:  
        return false;  
            }  
      
    }  
    public boolean find(Relative rel){  
        switch (rel) {  
           case Root:   // Easy case  
            current=root;  
            return true;  
              
           case Parent:  
            if(current==root)  
                return false;  
            current=findparent(current, root);  
            return true;  
              
           case LeftChild:  
            if(current.left==null)  
                return false;  
            current=current.left;  
            return true;  
              
           case RightChild:  
               if(current.right==null)  
                    return false;  
                current=current.right;  
                return true;  
                  
           default:  
               return false;  
        }  
          
    }  
      
}  
